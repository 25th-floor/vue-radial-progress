(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("RadialProgressBar", [], factory);
	else if(typeof exports === 'object')
		exports["RadialProgressBar"] = factory();
	else
		root["RadialProgressBar"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(5);

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  props: {
	    diameter: {
	      type: Number,
	      required: false,
	      default: 200
	    },
	    totalSteps: {
	      type: Number,
	      required: true,
	      default: 10
	    },
	    completedSteps: {
	      type: Number,
	      required: true,
	      default: 0
	    },
	    startColor: {
	      type: String,
	      required: false,
	      default: '#bbff42'
	    },
	    stopColor: {
	      type: String,
	      required: false,
	      default: '#429321'
	    },
	    strokeWidth: {
	      type: Number,
	      required: false,
	      default: 10
	    }
	  },
	
	  data: function data() {
	    return {
	      gradient: {
	        fx: 0.99,
	        fy: 0.5,
	        cx: 0.5,
	        cy: 0.5,
	        r: 0.65
	      },
	      gradientAnimation: null,
	      currentAngle: 0,
	      strokeDashoffset: 0
	    };
	  },
	
	
	  computed: {
	    radius: function radius() {
	      return this.diameter / 2;
	    },
	    circumference: function circumference() {
	      return Math.PI * this.innerCircleDiameter;
	    },
	    stepSize: function stepSize() {
	      return 100 / this.totalSteps;
	    },
	    finishedPercentage: function finishedPercentage() {
	      return this.stepSize * this.completedSteps;
	    },
	    circleSlice: function circleSlice() {
	      return 2 * Math.PI / this.totalSteps;
	    },
	    innerCircleDiameter: function innerCircleDiameter() {
	      return this.diameter - this.strokeWidth * 2;
	    },
	    innerCircleRadius: function innerCircleRadius() {
	      return this.innerCircleDiameter / 2;
	    },
	    containerStyle: function containerStyle() {
	      return {
	        height: this.diameter + 'px',
	        width: this.diameter + 'px'
	      };
	    },
	    progressStyle: function progressStyle() {
	      return {
	        height: this.diameter + 'px',
	        width: this.diameter + 'px',
	        strokeWidth: this.strokeWidth + 'px',
	        strokeDashoffset: this.strokeDashoffset
	      };
	    },
	    strokeStyle: function strokeStyle() {
	      return {
	        height: this.diameter + 'px',
	        width: this.diameter + 'px',
	        strokeWidth: this.strokeWidth + 'px'
	      };
	    }
	  },
	
	  methods: {
	    changeProgress: function changeProgress() {
	      var animateGradient = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	
	      var finishedPercentage = this.finishedPercentage;
	
	      if (isNaN(finishedPercentage)) {
	        finishedPercentage = 100;
	      }
	
	      if (finishedPercentage < 0) {
	        finishedPercentage = 0;
	      }
	
	      if (finishedPercentage > 100) {
	        finishedPercentage = 100;
	      }
	
	      var pct = (100 - finishedPercentage) / 100 * this.circumference;
	
	      this.animateGradient(50, 1000, animateGradient);
	
	      this.strokeDashoffset = pct;
	    },
	    getStopPointsOfCircle: function getStopPointsOfCircle(steps) {
	      var points = [];
	
	      for (var i = 0; i < steps; i++) {
	        var angle = this.circleSlice * i;
	        points.push(this.getPointOfCircle(angle));
	      }
	
	      return points;
	    },
	    getPointOfCircle: function getPointOfCircle(angle) {
	      var radius = 0.5;
	
	      var x = radius + radius * Math.cos(angle);
	      var y = radius + radius * Math.sin(angle);
	
	      return { x: x, y: y };
	    },
	    animateGradient: function animateGradient(msIncrements, msTotal) {
	      var _this = this;
	
	      var isAnimate = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	
	      if (this.completedSteps === 0 || !isAnimate) {
	        this.currentAngle = this.completedSteps * this.circleSlice;
	
	        var point = this.getPointOfCircle(this.currentAngle);
	
	        this.gradient.fx = point.x;
	        this.gradient.fy = point.y;
	        return;
	      }
	
	      var totalPoints = msTotal / msIncrements;
	      var slice = this.circleSlice / totalPoints;
	
	      var angleOffset = (this.completedSteps - 1) * this.circleSlice;
	
	      if (this.gradientAnimation) {
	        clearInterval(this.gradientAnimation);
	        var endAngle = angleOffset + this.circleSlice;
	
	        var totalSize = endAngle - this.currentAngle;
	
	        slice = totalSize / totalPoints;
	        angleOffset = this.currentAngle;
	      }
	
	      var i = 0;
	
	      this.gradientAnimation = setInterval(function () {
	        if (i === totalPoints) {
	          clearInterval(_this.gradientAnimation);
	          return;
	        }
	
	        _this.currentAngle = angleOffset + slice * i;
	
	        var point = _this.getPointOfCircle(_this.currentAngle);
	
	        _this.gradient.fx = point.x;
	        _this.gradient.fy = point.y;
	        i++;
	      }, msIncrements);
	    }
	  },
	
	  ready: function ready() {
	    var _this2 = this;
	
	    this.changeProgress();
	
	    this.$watch('totalSteps', function () {
	      _this2.changeProgress(true);
	    });
	
	    this.$watch('completedSteps', function () {
	      _this2.changeProgress(true);
	    });
	  }
	};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	
	
	// module
	exports.push([module.id, ".radial-progress-container[_v-8d6abd44] {\n  position: relative;\n}\n.radial-progress-bar circle[_v-8d6abd44] {\n  -webkit-transition: stroke-dashoffset 1s linear;\n  transition: stroke-dashoffset 1s linear;\n}\n", ""]);
	
	// exports


/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = "\n<div class=\"radial-progress-container\" :style=\"containerStyle\" _v-8d6abd44=\"\">\n  <slot _v-8d6abd44=\"\"></slot>\n  <svg class=\"radial-progress-bar\" :width=\"diameter\" :height=\"diameter\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" _v-8d6abd44=\"\">\n    <defs _v-8d6abd44=\"\">\n      <radialGradient id=\"radial-gradient\" :fx=\"gradient.fx\" :fy=\"gradient.fy\" :cx=\"gradient.cx\" :cy=\"gradient.cy\" :r=\"gradient.r\" _v-8d6abd44=\"\">\n        <stop offset=\"30%\" :stop-color=\"startColor\" _v-8d6abd44=\"\"></stop>\n        <stop offset=\"100%\" :stop-color=\"stopColor\" _v-8d6abd44=\"\"></stop>\n      </radialGradient>\n    </defs>\n    <circle :r=\"innerCircleRadius\" :cx=\"radius\" :cy=\"radius\" fill=\"transparent\" stroke=\"rgba(32, 32, 32, .5)\" :stroke-dasharray=\"circumference\" stroke-dashoffset=\"0\" stroke-linecap=\"round\" :style=\"strokeStyle\" _v-8d6abd44=\"\"></circle>\n    <circle transform=\"rotate(270, {{ radius }}, {{ radius }})\" :r=\"innerCircleRadius\" :cx=\"radius\" :cy=\"radius\" fill=\"transparent\" stroke=\"url(#radial-gradient)\" :stroke-dasharray=\"circumference\" :stroke-dashoffset=\"circumference\" stroke-linecap=\"round\" :style=\"progressStyle\" _v-8d6abd44=\"\"></circle>\n  </svg>\n</div>\n";

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	__webpack_require__(7)
	__vue_script__ = __webpack_require__(1)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src/RadialProgressBar.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(4)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	if (__vue_template__) {
	(typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__
	}


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if (media) {
			styleElement.setAttribute("media", media);
		}
	
		if (sourceMap) {
			// https://developer.chrome.com/devtools/docs/javascript-debugging
			// this makes source maps inside style tags work properly in Chrome
			css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */';
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(2);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(6)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js!./../node_modules/vue-loader/lib/style-rewriter.js?id=_v-8d6abd44&scoped=true!./../node_modules/less-loader/index.js!./../node_modules/vue-loader/lib/selector.js?type=style&index=0!./RadialProgressBar.vue", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js!./../node_modules/vue-loader/lib/style-rewriter.js?id=_v-8d6abd44&scoped=true!./../node_modules/less-loader/index.js!./../node_modules/vue-loader/lib/selector.js?type=style&index=0!./RadialProgressBar.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }
/******/ ])
});
;
//# sourceMappingURL=build.min.js.map